What happens when you initialize a repository? Why do you need to do it?

It creates a hidden directory that stores the metadata to start the version control of the project. 

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area allows to preview the files that are to be commited. If you have a lot of files made at different times or with different status it helps to organize the project.

How can you use the staging area to make sure you have one commit per logical change?

The staging area allows to organize what are you trying to commit and to identify the changes between your changes and the master branch.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

To make an experimental feature or when trying something new in a code.

How do the diagrams help you visualize the branch structure?

Diagrams help to understand that there are some commits that are not in a branch that could no be reached if you don't have the ID. They also help to see where the different branches of the project start and end.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result of merging two branches is one branch with the commits of both branches ordered by time and I final commit with the merged code. The diagram is represented like that due to the brance merging solution.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The pros of Git's automatic merging is that is fast, if there are inconsistencies it helps by marking

Cons is not smart enough.


